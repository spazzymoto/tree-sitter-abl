===============================
assignment expression statement
===============================

a = 1.

---

(program
  (expression_statement
    (assignment_expression
      (identifier)
      (decimal_integer_literal))))

===============================
complex assignment expression statement
===============================

a = 1 + 2 - 3.

---

(program
  (expression_statement
    (assignment_expression
      (identifier)
      (binary_expression
        (binary_expression
          (decimal_integer_literal)
          (decimal_integer_literal))
        (decimal_integer_literal)))))

=================
binary expression
=================

1 + 1.

---

(program
  (expression_statement
    (binary_expression
      (decimal_integer_literal)
      (decimal_integer_literal))))

================
unary expression
================

-1.

---

(program
  (expression_statement
    (unary_expression
      (decimal_integer_literal))))

====================
not unary expression
====================

lLogical = NOT TRUE.

---
(program
  (expression_statement
    (assignment_expression
      (identifier)
      (unary_expression
        (kwNOT)
        (true
          (kwTRUE))))))

=======================
assign unary expression
=======================

a = +10.

---

(program
  (expression_statement
    (assignment_expression
      (identifier)
      (unary_expression
        (decimal_integer_literal)))))

==========================
assign property expression
==========================

oObject:oSubObject:Property = "Value":U.

---

(program
  (expression_statement
    (assignment_expression
      (member_expression
        (member_expression
          (identifier)
          (identifier))
        (identifier))
      (character_literal
        (string_modifier)))))

============================
method invocation expression
============================

cTest = oObject:getCharacterValue().

---

(program
  (expression_statement
    (assignment_expression
      (identifier)
      (call_expression
        (member_expression
          (identifier)
          (identifier))
        (argument_list)))))

============================
method invocation expression
============================

cTest = oObject:oSubObject:getCharacterValue().

---

(program
  (expression_statement
    (assignment_expression
      (identifier)
      (call_expression
        (member_expression
          (member_expression
            (identifier)
            (identifier))
          (identifier))
        (argument_list)))))

===========================
non-scoped new expression
===========================

NEW Object().

---

(program
  (expression_statement
    (new_expression
      (kwNEW)
      (identifier)
      (argument_list))))

=======================
scoped new expression
=======================

NEW Progress.Lang.Object().

---

(program
  (expression_statement
    (new_expression
      (kwNEW)
      (scoped_identifier
        (scoped_identifier
          (identifier)
          (identifier))
        (identifier))
      (argument_list))))

===========================
non-scoped new assignment expression
===========================

oObject = NEW Object().

---

(program
  (expression_statement
    (assignment_expression
      (identifier)
      (new_expression
        (kwNEW)
        (identifier)
        (argument_list)))))

=======================
scoped new assignment expression
=======================

oObject = NEW Progress.Lang.Object().

---

(program
  (expression_statement
    (assignment_expression
      (identifier)
      (new_expression
        (kwNEW)
        (scoped_identifier
          (scoped_identifier
            (identifier)
            (identifier))
          (identifier))
        (argument_list)))))

================================
new method invocation expression
================================

(NEW Progress.Lang.Object()):GetClass().

---

(program
  (expression_statement
    (call_expression
      (member_expression
        (parenthesized_expression
          (new_expression
            (kwNEW)
            (scoped_identifier
              (scoped_identifier
                (identifier)
                (identifier))
              (identifier))
            (argument_list)))
        (identifier))
      (argument_list))))
